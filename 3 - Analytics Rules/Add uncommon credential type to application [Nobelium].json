
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workspace": {
      "type": "String"
    }
  },
  "resources": [
    {
      "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/63a191f4-a0ad-4ed7-b994-24ffc89b3596')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/63a191f4-a0ad-4ed7-b994-24ffc89b3596')]",
      "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
      "kind": "Scheduled",
      "apiVersion": "2022-11-01-preview",
      "properties": {
        "displayName": "Add uncommon credential type to application [Nobelium]",
        "description": "The query looks for users or service principals that attached an uncommon credential type to application. As part of the Nobelium campaign, the attacker added credentials to already existing applications and used the application permissions to extract users' mails. See How to: Use the portal to create an Microsoft Entra ID application and service principal that can access resources. Reference - https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal",
        "severity": "High",
        "enabled": true,
        "query": "| CloudAppEvents | where Application == \"Office 365\" | where ActionType in (\"Add service principal credentials.\", \"Update application - Certificates and secrets management \") | project Timestamp, RawEventData, AccountDisplayName, ActionType, AccountObjectId | extend ModifiedProperties = RawEventData.ModifiedProperties[0] | extend NewValue = ModifiedProperties.NewValue, OldValue = ModifiedProperties.OldValue, Name = ModifiedProperties.Name | project Timestamp, AccountDisplayName, ActionType, NewValue, OldValue, RawEventData, AccountObjectId | where (NewValue has \"KeyType=Password\" and OldValue !has \"KeyType=Password\" and OldValue has \"AsymmetricX509Cert\") or (NewValue has \"AsymmetricX509Cert\" and OldValue !has \"AsymmetricX509Cert\" and OldValue has \"KeyType=Password\") | extend NewSecret = set_difference(todynamic(parse_json(tostring(NewValue))), todynamic(parse_json(tostring(OldValue)))) | project Timestamp,ActionType,ActorType = RawEventData.Actor[-1].ID, ObjectId = RawEventData.Actor[-2].ID, AccountDisplayName, AccountObjectId, AppnName = RawEventData.Target[3].ID, AppObjectId = RawEventData.Target[1].ID, NewSecret = NewSecret[0], RawEventData\n",
        "queryFrequency": "PT1H",
        "queryPeriod": "PT1H",
        "triggerOperator": "GreaterThan",
        "triggerThreshold": 0,
        "suppressionDuration": "PT1H",
        "suppressionEnabled": false,
        "startTimeUtc": null,
        "tactics": [
          "Privilege escalation"
        ],
        "techniques": [],
        "alertRuleTemplateName": "6e575295-a7e6-464c-8192-3e1d8fd6a990",
        "incidentConfiguration": {
          "createIncident": true,
          "groupingConfiguration": {
            "enabled": false,
            "reopenClosedIncident": false,
            "lookbackDuration": "PT5H",
            "matchingMethod": "AllEntities",
            "groupByEntities": [],
            "groupByAlertDetails": [],
            "groupByCustomDetails": []
          }
        },
        "eventGroupingSettings": {
          "aggregationKind": "SingleAlert"
        },
        "alertDetailsOverride": null,
        "customDetails": null,
        "entityMappings": [
          {
            "entityType": "Account",
            "fieldMappings": [
              {
                "identifier": "Name",
                "columnName": "Name"
              },
              {
                "identifier": "UPNSuffix",
                "columnName": "UPNSuffix"
              }
            ]
          },
          {
            "entityType": "Host",
            "fieldMappings": [
              {
                "identifier": "HostName",
                "columnName": "HostName"
              },
              {
                "identifier": "DnsDomain",
                "columnName": "DnsDomain"
              }
            ]
          },
          {
            "entityType": "IP",
            "fieldMappings": [
              {
                "identifier": "Address",
                "columnName": "IPEntity"
              }
            ]
          }
        ],
        "sentinelEntitiesMappings": null,
        "templateVersion": "2.0.3"
      }
    }
  ]
}